package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"tourism/internal/model"
	"tourism/internal/repository"
	"tourism/internal/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
func userKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏"),
			tgbotapi.NewKeyboardButton("üè® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üó∫ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"),
			tgbotapi.NewKeyboardButton("üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
}

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
func providerKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏"),
			tgbotapi.NewKeyboardButton("üì¶ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
}

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func supportKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏"),
		),
	)
}

func main() {
	// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	dbHost := os.Getenv("DB_HOST")
	if dbHost == "" {
		dbHost = "db"
	}
	dbPort := os.Getenv("DB_PORT")
	if dbPort == "" {
		dbPort = "5432"
	}
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort,
		os.Getenv("DB_USER"), os.Getenv("DB_PASS"), os.Getenv("DB_NAME"),
	)
	db, err := sqlx.Connect("postgres", dsn)
	if err != nil {
		log.Fatalf("DB connection failed: %v", err)
	}

	// —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	userRepo := repository.NewUserRepository(db)
	messageRepo := repository.NewMessageRepository(db)
	locRepo := repository.NewLocationRepository(db)
	tripRepo := repository.NewTripRepository(db)
	bookRepo := repository.NewBookingRepository(db)

	// —Å–µ—Ä–≤–∏—Å—ã
	locationService := service.NewLocationService(locRepo)
	tripService := service.NewTripService(tripRepo, locRepo)
	bookingService := service.NewBookingService(bookRepo)
	chatService := service.NewChatService(bookRepo, userRepo, locRepo)
	authService := service.NewAuthService(userRepo)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")
	}
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	updates := bot.GetUpdatesChan(tgbotapi.NewUpdate(0))

	// –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	activeTrip := make(map[int64]int)
	pendingBooking := make(map[int64]int)
	pendingAddPhoto := make(map[int64]int)
	searchMode := make(map[int64]string)

	for update := range updates {
		// inline callbacks
		if cq := update.CallbackQuery; cq != nil {
			bot.Request(tgbotapi.NewCallback(cq.ID, ""))
			data := cq.Data
			chatID := cq.Message.Chat.ID
			userID := cq.From.ID

			switch {
			// –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
			case strings.HasPrefix(data, "LOC_"):
				id, _ := strconv.Atoi(strings.TrimPrefix(data, "LOC_"))
				loc, photos, _ := locationService.GetLocationDetails(id)
				if len(photos) > 0 {
					bot.Send(tgbotapi.NewPhoto(chatID, tgbotapi.FileID(photos[0].FileID)))
				}
				// –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–∞—Ä—Ç–∞
				text := fmt.Sprintf("*%s*\n%s\n[–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö](https://maps.google.com/?q=%f,%f)",
					loc.Name, loc.Description, loc.Latitude, loc.Longitude,
				)
				msg := tgbotapi.NewMessage(chatID, text)
				msg.ParseMode = "Markdown"
				btnAdd := tgbotapi.NewInlineKeyboardButtonData("‚ûï –í –º–∞—Ä—à—Ä—É—Ç", fmt.Sprintf("ADDTRIP_%d", id))
				btnBook := tgbotapi.NewInlineKeyboardButtonData("üõé –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("BOOK_%d", id))

				switch searchMode[userID] {
				case "location":
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(btnAdd),
					)
				case "booking":
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(btnBook),
					)
				default:
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(btnAdd, btnBook),
					)
				}
				delete(searchMode, userID)
				bot.Send(msg)

			// –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Ä—à—Ä—É—Ç
			case strings.HasPrefix(data, "ADDTRIP_"):
				id, _ := strconv.Atoi(strings.TrimPrefix(data, "ADDTRIP_"))
				if tripID, ok := activeTrip[userID]; ok {
					tripService.AddLocationToTrip(tripID, id)
					bot.Send(tgbotapi.NewMessage(chatID, "–õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞—Ä—à—Ä—É—Ç"))
				} else {
					bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç (üó∫ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç)"))
				}

			// –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
			case strings.HasPrefix(data, "BOOK_"):
				id, _ := strconv.Atoi(strings.TrimPrefix(data, "BOOK_"))
				pendingBooking[userID] = id
				bot.Send(tgbotapi.NewMessage(chatID,
					"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø—Ä.: 2025-07-01 ‚Äî 2025-07-05, 3 —á–µ–ª–æ–≤–µ–∫–∞",
				))

			// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–∞–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
			case strings.HasPrefix(data, "CONFIRM_"), strings.HasPrefix(data, "REJECT_"):
				parts := strings.Split(data, "_")
				action, sid := parts[0], parts[1]
				bID, _ := strconv.Atoi(sid)
				if action == "CONFIRM" {
					bookingService.ConfirmBooking(bID)
				} else {
					bookingService.RejectBooking(bID)
				}
				bk, _ := bookingService.GetBooking(bID)
				res := map[string]string{
					"CONFIRM": "–í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ",
					"REJECT":  "–í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå",
				}[action]
				bot.Send(tgbotapi.NewMessage(int64(bk.UserID), res))
			}

			continue
		}

		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		if msg := update.Message; msg != nil {
			chatID := msg.Chat.ID
			userID := msg.From.ID
			text := msg.Text

			// –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏
			if locID, ok := pendingBooking[userID]; ok {
				bookID, err := bookingService.CreateBooking(int(userID), locID, text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏"))
				} else {
					bot.Send(tgbotapi.NewMessage(chatID,
						fmt.Sprintf("–ó–∞—è–≤–∫–∞ #%d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É", bookID),
					))
					loc, _ := locRepo.GetByID(locID)
					if loc.ProviderID != nil {
						prov, _ := userRepo.GetByID(*loc.ProviderID)
						notify := tgbotapi.NewMessage(prov.TelegramID,
							fmt.Sprintf("–ù–æ–≤–∞—è –±—Ä–æ–Ω—å #%d –æ—Ç %s: %s", bookID, msg.From.FirstName, text),
						)
						btnC := tgbotapi.NewInlineKeyboardButtonData("‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("CONFIRM_%d", bookID))
						btnR := tgbotapi.NewInlineKeyboardButtonData("‚úñ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("REJECT_%d", bookID))
						notify.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(btnC, btnR),
						)
						bot.Send(notify)
					}
				}
				delete(pendingBooking, userID)
				continue
			}

			// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
			if locID, ok := pendingAddPhoto[userID]; ok {
				if len(msg.Photo) > 0 {
					fileID := msg.Photo[len(msg.Photo)-1].FileID
					locationService.AddPhoto(locID, fileID)
					bot.Send(tgbotapi.NewMessage(chatID, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"))
				} else {
					bot.Send(tgbotapi.NewMessage(chatID, "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ"))
				}
				delete(pendingAddPhoto, userID)
				continue
			}

			// —á–∞—Ç —Ç—É—Ä–∏—Å—Ç ‚Üî –ø—Ä–æ–≤–∞–π–¥–µ—Ä
			if partner := chatService.GetChatPartner(userID); partner != 0 {
				out := fmt.Sprintf("%s: %s", msg.From.FirstName, text)
				bot.Send(tgbotapi.NewMessage(partner, out))
				// –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
				s, _ := userRepo.GetByTelegramID(userID)
				r, _ := userRepo.GetByTelegramID(partner)
				bID := chatService.GetChatBookingID(userID)
				messageRepo.Save(&model.Message{
					FromUserID: s.ID,
					ToUserID:   r.ID,
					BookingID:  &bID,
					Content:    text,
					IsSupport:  false,
				})
				continue
			}

			// –∫–æ–º–∞–Ω–¥–∞ /start
			if msg.IsCommand() && msg.Command() == "start" {
				user, _ := authService.AuthUser(int64(userID), msg.From.UserName, msg.From.FirstName, msg.From.LastName)
				var kb tgbotapi.ReplyKeyboardMarkup
				switch user.Role {
				case "provider":
					kb = providerKeyboard()
				case "support":
					kb = supportKeyboard()
				default:
					kb = userKeyboard()
				}
				resp := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", user.FirstName))
				resp.ReplyMarkup = kb
				bot.Send(resp)
				continue
			}

			// –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
			switch text {
			case "üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏":
				searchMode[userID] = "location"
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ * –¥–ª—è –≤—Å–µ—Ö):"))
				continue

			case "üè® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
				searchMode[userID] = "booking"
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ * –¥–ª—è –≤—Å–µ—Ö):"))
				continue

			case "üó∫ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç":
				user, _ := userRepo.GetByTelegramID(userID)
				if user == nil {
					user, _ = authService.AuthUser(int64(userID), msg.From.UserName, msg.From.FirstName, msg.From.LastName)
				}
				tripID, err := tripService.CreateTrip(user.ID, "–ú–æ–π –º–∞—Ä—à—Ä—É—Ç")
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç."))
				} else {
					activeTrip[userID] = tripID
					bot.Send(tgbotapi.NewMessage(chatID, "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏."))
				}
				continue

			case "üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
				bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @TouristSupportHelpBot –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
				continue

			case "üì¶ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
				bot.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
				continue

			case "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
				bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addphoto <ID_–ª–æ–∫–∞—Ü–∏–∏> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."))
				continue

			case "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏":
				bot.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
				continue
			}

			// –∫–æ–º–∞–Ω–¥—ã
			if msg.IsCommand() {
				switch msg.Command() {
				case "locations":
					bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ * –¥–ª—è –≤—Å–µ—Ö):"))
				case "newtrip":
					user, _ := userRepo.GetByTelegramID(userID)
					if user == nil {
						user, _ = authService.AuthUser(int64(userID), msg.From.UserName, msg.From.FirstName, msg.From.LastName)
					}
					tripID, err := tripService.CreateTrip(user.ID, "–ú–æ–π –º–∞—Ä—à—Ä—É—Ç")
					if err != nil {
						bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç."))
					} else {
						activeTrip[userID] = tripID
						bot.Send(tgbotapi.NewMessage(chatID, "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏."))
					}
				case "addphoto":
					args := msg.CommandArguments()
					locID, err := strconv.Atoi(args)
					if args == "" || err != nil {
						bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addphoto <–∏–¥_–ª–æ–∫–∞—Ü–∏–∏>"))
					} else {
						user, _ := userRepo.GetByTelegramID(userID)
						if user.Role != "support" {
							bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ."))
						} else {
							pendingAddPhoto[userID] = locID
							bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ #%d", locID)))
						}
					}
				}
				continue
			}

			// —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É
			_, hasMode := searchMode[userID]
			kw := strings.TrimSpace(text)
			if kw == "*" {
				kw = ""
			}
			locs, err := locationService.SearchLocations("", "", 0, kw)
			if err != nil || len(locs) == 0 {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))
				if hasMode {
					delete(searchMode, userID)
				}
				continue
			}
			btns := make([]tgbotapi.InlineKeyboardButton, len(locs))
			for i, loc := range locs {
				name := loc.Name
				if len(name) > 30 {
					name = name[:30] + "..."
				}
				btns[i] = tgbotapi.NewInlineKeyboardButtonData(name, fmt.Sprintf("LOC_%d", loc.ID))
			}
			rowBtns := tgbotapi.NewInlineKeyboardRow(btns...)
			reply := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ: %d", len(locs)))
			reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rowBtns)
			bot.Send(reply)
		}
	}
}
