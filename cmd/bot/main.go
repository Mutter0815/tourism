package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"tourism/internal/model"
	"tourism/internal/repository"
	"tourism/internal/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

// ReplyKeyboard –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
func userKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏"),
			tgbotapi.NewKeyboardButton("üó∫ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
			tgbotapi.NewKeyboardButton("üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
}

// ReplyKeyboard –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
func providerKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏"),
			tgbotapi.NewKeyboardButton("üì¶ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
}

// ReplyKeyboard –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func supportKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞"),
			tgbotapi.NewKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏"),
		),
	)
}

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	dbHost := os.Getenv("DB_HOST")
	if dbHost == "" {
		dbHost = "db"
	}
	dbPort := os.Getenv("DB_PORT")
	if dbPort == "" {
		dbPort = "5432"
	}
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort,
		os.Getenv("DB_USER"), os.Getenv("DB_PASS"), os.Getenv("DB_NAME"),
	)
	db, err := sqlx.Connect("postgres", dsn)
	if err != nil {
		log.Fatalf("DB connection failed: %v", err)
	}

	// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
	userRepo := repository.NewUserRepository(db)
	locationService := service.NewLocationService(repository.NewLocationRepository(db))
	tripService := service.NewTripService(repository.NewTripRepository(db), repository.NewLocationRepository(db))
	bookingService := service.NewBookingService(repository.NewBookingRepository(db))
	chatService := service.NewChatService(repository.NewBookingRepository(db), userRepo, repository.NewLocationRepository(db))
	offerService := service.NewOfferService(repository.NewSubscriptionRepository(db))
	authService := service.NewAuthService(userRepo)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN)")
	}
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}
	log.Printf("–ó–∞–ø—É—â–µ–Ω –±–æ—Ç %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ
	activeTrip := make(map[int64]int)
	pendingBooking := make(map[int64]int)
	pendingAddPhoto := make(map[int64]int)

	for update := range updates {
		// Inline callback
		if cq := update.CallbackQuery; cq != nil {
			bot.Request(tgbotapi.NewCallback(cq.ID, ""))
			fromID := cq.From.ID
			data := cq.Data
			// –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline... (–∫–∞–∫ –±—ã–ª–æ)
			continue
		}

		// –°–æ–æ–±—â–µ–Ω–∏—è
		if update.Message == nil {
			continue
		}
		msg := update.Message
		chatID := msg.Chat.ID
		userID := msg.From.ID
		text := msg.Text

		// –ö–æ–º–∞–Ω–¥–∞ /start —Å –º–µ–Ω—é
		if msg.IsCommand() && msg.Command() == "start" {
			user, _ := authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
			var kb tgbotapi.ReplyKeyboardMarkup
			switch user.Role {
			case "provider":
				kb = providerKeyboard()
			case "support":
				kb = supportKeyboard()
			default:
				kb = userKeyboard()
			}
			resp := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", user.FirstName))
			resp.ReplyMarkup = kb
			bot.Send(resp)
			continue
		}

		// Menu buttons
		switch text {
		case "üìç –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏":
			bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ * –¥–ª—è –≤—Å–µ—Ö):"))
			continue

		case "üó∫ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç":
			user, _ := userRepo.GetByTelegramID(userID)
			if user == nil {
				user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
			}
			tripID, err := tripService.CreateTrip(user.ID, "–ú–æ–π –º–∞—Ä—à—Ä—É—Ç")
			if err != nil {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç."))
			} else {
				activeTrip[userID] = tripID
				bot.Send(tgbotapi.NewMessage(chatID, "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏."))
			}
			continue

		case "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
			user, _ := userRepo.GetByTelegramID(userID)
			if user == nil {
				user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
			}
			offerService.Subscribe(user.ID)
			bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."))
			continue

		case "üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @TouristSupportHelpBot –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
			continue

		case "üì¶ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
			bot.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
			continue

		case "üì§ –†–∞—Å—Å—ã–ª–∫–∞":
			user, _ := userRepo.GetByTelegramID(userID)
			if user.Role != "support" {
				bot.Send(tgbotapi.NewMessage(chatID, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /broadcast <—Ç–µ–∫—Å—Ç> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."))
			}
			continue

		case "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
			bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addphoto <ID_–ª–æ–∫–∞—Ü–∏–∏> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."))
			continue

		case "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏":
			bot.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
			continue
		}

		// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
		if msg.IsCommand() {
			switch msg.Command() {
			case "locations":
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ * –¥–ª—è –≤—Å–µ—Ö):"))
			case "newtrip":
				user, _ := userRepo.GetByTelegramID(userID)
				if user == nil {
					user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
				}
				tripID, err := tripService.CreateTrip(user.ID, "–ú–æ–π –º–∞—Ä—à—Ä—É—Ç")
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç."))
				} else {
					activeTrip[userID] = tripID
					bot.Send(tgbotapi.NewMessage(chatID, "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏."))
				}
			case "subscribe_offers":
				user, _ := userRepo.GetByTelegramID(userID)
				if user == nil {
					user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
				}
				offerService.Subscribe(user.ID)
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."))
			case "unsubscribe_offers":
				user, _ := userRepo.GetByTelegramID(userID)
				if user == nil {
					user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
				}
				offerService.Unsubscribe(user.ID)
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."))
			case "addphoto":
				args := msg.CommandArguments()
				locID, err := strconv.Atoi(args)
				if args == "" || err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addphoto <–∏–¥_–ª–æ–∫–∞—Ü–∏–∏>"))
				} else {
					user, _ := userRepo.GetByTelegramID(userID)
					if user.Role != "support" {
						bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ."))
					} else {
						pendingAddPhoto[userID] = locID
						bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ #%d", locID)))
					}
				}
			case "broadcast":
				user, _ := userRepo.GetByTelegramID(userID)
				if user.Role != "support" {
					bot.Send(tgbotapi.NewMessage(chatID, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."))
				} else {
					ids, _ := offerService.GetSubscriberIDs()
					for _, tid := range ids {
						bot.Send(tgbotapi.NewMessage(tid, msg.CommandArguments()))
					}
					bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."))
				}
			}
			continue
		}

		// –û–∂–∏–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
		if locID, ok := pendingBooking[userID]; ok {
			details := msg.Text
			delete(pendingBooking, userID)
			user, _ := userRepo.GetByTelegramID(userID)
			if user == nil {
				user, _ = authService.AuthUser(userID, msg.From.UserName, msg.From.FirstName, msg.From.LastName)
			}
			bookID, err := bookingService.CreateBooking(user.ID, locID, details)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏."))
			} else {
				loc, _ := repository.NewLocationRepository(db).GetByID(locID)
				if loc.ProviderID != nil {
					prov, _ := userRepo.GetByID(*loc.ProviderID)
					textMsg := fmt.Sprintf("–ù–æ–≤–∞—è –±—Ä–æ–Ω—å –æ—Ç %s –ø–æ %s: %s", user.FirstName, loc.Name, details)
					btnC := tgbotapi.NewInlineKeyboardButtonData("‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("CONFIRM_%d", bookID))
					btnR := tgbotapi.NewInlineKeyboardButtonData("‚úñ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("REJECT_%d", bookID))
					row := tgbotapi.NewInlineKeyboardRow(btnC, btnR)
					notify := tgbotapi.NewMessage(prov.TelegramID, textMsg)
					notify.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(row)
					bot.Send(notify)
				}
				bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É."))
			}
			continue
		}

		// –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ
		if locID, ok := pendingAddPhoto[userID]; ok {
			if len(msg.Photo) > 0 {
				fileID := msg.Photo[len(msg.Photo)-1].FileID
				locationService.AddPhoto(locID, fileID)
				bot.Send(tgbotapi.NewMessage(chatID, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ."))
			}
			delete(pendingAddPhoto, userID)
			continue
		}

		// –ß–∞—Ç —Ç—É—Ä–∏—Å—Ç<->–ø—Ä–æ–≤–∞–π–¥–µ—Ä
		if partnerID := chatService.GetChatPartner(userID); partnerID != 0 {
			out := fmt.Sprintf("%s: %s", msg.From.FirstName, msg.Text)
			bot.Send(tgbotapi.NewMessage(partnerID, out))

			sender, _ := userRepo.GetByTelegramID(userID)
			receiver, _ := userRepo.GetByTelegramID(partnerID)
			bID := chatService.GetChatBookingID(userID)
			messageRepo.Save(&model.Message{FromUserID: sender.ID, ToUserID: receiver.ID, BookingID: &bID, Content: msg.Text, IsSupport: false})
			continue
		}

		// –§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π
		kw := strings.TrimSpace(text)
		if kw == "*" {
			kw = ""
		}
		locs, err := locationService.SearchLocations("", "", 0, kw)
		if err != nil || len(locs) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))
			continue
		}
		btns := make([]tgbotapi.InlineKeyboardButton, len(locs))
		for i, loc := range locs {
			name := loc.Name
			if len(name) > 30 {
				name = name[:30] + "..."
			}
			btns[i] = tgbotapi.NewInlineKeyboardButtonData(name, fmt.Sprintf("LOC_%d", loc.ID))
		}
		rowBtns := tgbotapi.NewInlineKeyboardRow(btns...)
		reply := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ: %d", len(locs)))
		reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rowBtns)
		bot.Send(reply)
	}
}
